INDEX.HTML

<!doctype html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="description" content="">
	<title>6.7 - jQuery UI slider</title>
	<!-- Bootstrap -->
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
	<!-- jQueryUI styling -->
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
	<!-- Tooltip styling -->
	<link rel="stylesheet" href="css/d3-tip.css">
	<!-- Custom styling -->
	<link rel="stylesheet" href="css/style.css">
</head>
<body>
	<nav class="navbar navbar-light bg-light">
		<div class="container">      
		</div>
	</nav>

	<!-- Bootstrap grid setup -->
	
		<div class="row">
			<div class="col-md-12">
				<div id="chart-area"></div>                 
			</div> 
		</div>
	</div>

   <div class="container">
		<div class="row">
			<div class="col-md-6">
							</div>
			</div>
			<div class="col-md-6">
				
			</div>
		</div>
	<!-- External JS libraries -->
	<script src="https://d3js.org/d3.v5.min.js"></script>
	<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="crossorigin="anonymous"></script>
	<script src="js/d3-tip.js"></script>
	<!-- Custom JS -->
	<script src="js/main.js"></script>
</body>
</html>
-----------------------------------------------------------------------------------------

main.js

/* the svg code*/


const margin={left:100,right:10,top:10,bottom:130}
const height= 600-margin.top-margin.bottom
const width =1500-margin.left-margin.right

const svg=d3.select("#chart-area").append("svg")
.attr("width",width+margin.left+margin.right) 
.attr("height",height+margin.top+margin.bottom)

g=svg.append("g")
.attr("transform",`translate(${margin.left},${margin.top})`)

//x label
g.append("text")
 .attr("class","x-axis-label")
 .attr("x",width/2)
 .attr("y",height+50)
 .attr("font-size","20px")
 .attr("text-anchor","middle")
 .text("Description")

// Y label
g.append("text")
  .attr("class", "y axis-label")
  .attr("x", - (height / 2))
  .attr("y", -60)
  .attr("font-size", "20px")
  .attr("text-anchor", "middle")
  .attr("transform", "rotate(-90)")
  .text("count of death")

d3.csv("data/datavOne.csv").then(data=>{
data.forEach(d=>{

d.Total_deaths=Number(d.Total_deaths)
})

const x = d3.scaleBand()
    .domain(data.map(d => d.Description))
    .range([0, width])
    .paddingInner(0.3)
    .paddingOuter(0.2)
console.log(x)

const y = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.Total_deaths)])
    .range([height, 0])

const xAxisCall=d3.axisBottom(x)
g.append("g")
  .attr("class","x axis")
.attr("transform", `translate(0, ${height})`)
  .call(xAxisCall)
  .selectAll("text")
      .attr("y", "10")
      .attr("x", "-5")
      .attr("text-anchor", "end")
      .attr("transform", "rotate(-40)")

const yAxisCall=d3.axisLeft(y)
      .ticks(10)
.tickFormat(d => d + "")
g.append("g")
      .attr("class","y-axis")
      .call(yAxisCall)

const rects=g.selectAll("rect").data(data)

rects.enter().append("rect")
     .attr("y",d=>y(d.Total_deaths))
     .attr("x",(d)=>x(d.Description))
     .attr("width",x.bandwidth)
     .attr("height",d=>height-y(d.Total_deaths))
     .attr("fill","blue")

})


/////////////////////////////////////////////////////////////////
/*

// interactive chart

const margin={left:100,right:10,bottom:10,top:130}
height=600-margin.top -margin.bottom
width=1500-margin.left-margin.right
let flag=true

svg=d3.select("#chart-area").append("svg")
                            .attr("width",width+margin.left+margin.right)
                            .attr("height",height+margin.top+margin.bottom)
g=svg.append("g")
 .attr("transform",`translate(${margin.left},${margin.right})`)

//x label
g.append("text")
  .attr("x",width/2)
  .attr("y",height+60)
  .attr("font-size","20px")
  .attr("text-anchor","middle")
  .attr("transform","rotate(-40)")
.text("State")


// ylabel
const yLabel = g.append("text")
  .attr("class", "y axis-label")
  .attr("x", - (height/ 2))
  .attr("y", -60)
  .attr("font-size", "20px")
  .attr("text-anchor", "middle")
  .attr("transform", "rotate(-90)")

const x = d3.scaleBand()

  .range([0, width])
  .paddingInner(0.1)
  .paddingOuter(0.1)

const y = d3.scaleLinear()

  .range([height, 0])



//x axis

const xAxisGroup = g.append("g")
  .attr("class","x axis")
.attr("transform", `translate(0, ${height})`)

//y axis

const yAxisGroup = g.append("g")
  .attr("class","y axis")



d3.csv("data/StateDeathCountyvone.csv").then(data=>{
data.forEach(d=>{
d.deaths=Number(d.deaths)
d.County=Number(d.County)

})
console.log(data)

d3.interval(()=>{
flag=!flag
update(data)
},1500)

update(data)

})

function update(data){
const value=flag?"deaths":"County"
const t=d3.transition().duration(750)
x.domain(data.map(d=>d.State))
y.domain([0,d3.max(data, d=>d[value])])


 const xAxisCall = d3.axisBottom(x)
  xAxisGroup.transition(t).call(xAxisCall)
    .selectAll("text")
      .attr("y", "10")
      .attr("x", "-5")
      .attr("text-anchor", "end")
      .attr("transform", "rotate(-40)")

const yAxisCall = d3.axisLeft(y)
    .ticks(5 )
    .tickFormat(d => d + "")
  yAxisGroup.transition(t).call(yAxisCall)
console.log(data.map(d=>y(d[value])))
console.log(data.map(d=>d.State))
//join new data
const rects=g.selectAll("rect").data(data, d=>d.State)

//exit old elements not in present data

rects.exit()
     .attr("fill","red")
     .transition(t)
     .attr("height",0)
     .attr("y",y(0))
     .remove()

//enter new element present in data
rects.enter().append("rect") 
    .attr("fill", "grey")
    .attr("y", y(0))
    .attr("height", 0)

// AND UPDATE old elements present in new data.
    .merge(rects)
    .transition(t)
      .attr("x", (d) => x(d.State))
      .attr("width", x.bandwidth)
      .attr("y", (d) => y(d[value]))
      .attr("height", d => height - y(d[value]))   

  const text = flag ? "deaths" : "County"
  yLabel.text(text)

}
*/
